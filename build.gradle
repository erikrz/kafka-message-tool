buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'checkstyle'
    id 'groovy'
    id 'idea'
    id "jacoco"
    id 'java'
    id 'java-library-distribution'
    id 'maven-publish'
    id 'publishing'
    id 'com.github.ben-manes.versions' version '0.39.0'
    id "com.github.johnrengelman.shadow" version "7.0.0"
    id 'com.github.spotbugs' version "4.7.3"
    id "com.jfrog.artifactory" version "4.24.16"
    id "io.freefair.lombok" version "6.1.0"
    id 'org.ajoberstar.grgit' version '4.1.0'
}

repositories {
    mavenCentral()
}

import java.time.Instant

static String getShortenedTimestamp() {
    new Date().format("MMdd-HHmmss", TimeZone.default)
}


// <app>-<major-patch>-<minor-patch>-<fix>
//version = "1.1.x.x-dev-build.02"
version = "1.0.4.0"

println "Gradle project dir: ${projectDir}"

sourceCompatibility = 1.8
targetCompatibility = 1.8
ext.timestamp = Instant.now().toString()

distTar.enabled = false
distZip.enabled = false


if (version == "unspecified") {
    version = "dev"
}

jar.archiveFileName = "${rootProject.name}-${version}.jar"
jar.manifest.attributes 'Main-Class': 'application.Main'

dependencies {
    testImplementation(
            'com.github.grzesiek-galezowski:tdd-toolkit-java:1.0.29',
            'org.assertj:assertj-core:3.8.0',
            'org.hamcrest:hamcrest-all:1.3',
            'org.mockito:mockito-core:3.12.4',
            'org.testng:testng:7.4.0',
            'org.xmlunit:xmlunit-matchers:2.8.2'
    )
    implementation 'com.google.guava:guava:30.1.1-jre'
    implementation 'commons-validator:commons-validator:1.7'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'org.apache.kafka:kafka-clients:2.3.0'
    implementation 'org.apache.kafka:kafka_2.12:2.3.0'
    implementation 'org.codehaus.groovy:groovy-all:3.0.8'
    implementation 'org.controlsfx:controlsfx:8.40.18'
    implementation 'org.fxmisc.richtext:richtextfx:0.10.6'
    implementation 'org.projectlombok:lombok:1.18.20'
}

checkstyle {
    toolVersion = "8.1"
}

task createProperties() {
    doLast {
        String fileLocation = "$projectDir/src/main/resources/version.properties"
        // recreate file on build, delete it first
        new File(fileLocation).delete()
        new File(fileLocation).withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p.store w, null
        }
    }
}

processResources.dependsOn createProperties


spotbugs {
    toolVersion = "4.4.0"
    ignoreFailures = false
    effort = "max"
    reportLevel = "high"
    omitVisitors = ["FindNonShortCircuit"]
    excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")
}


task checkAndTest {
    group = rootProject.name
    dependsOn tasks.check, tasks.test
}

task buildJar {
    group = rootProject.name
    dependsOn tasks.assemble, tasks.checkAndTest, tasks.shadowJar
}

shadowJar {
    archiveBaseName.set(project.name)
    version = project.version
    archiveAppendix.set("")
    archiveClassifier.set("")
    from("src/main/java") {
        include "/**/*.fxml"
    }
}

jar {
    archivesBaseName = project.name
    from("src/main/java") {
        include '/**/*.fxml'
    }
}

build.doFirst {
    println "Build Version [${version}] ISO Time [${timestamp}]"
}

test {
    useTestNG() {
        useDefaultListeners = true
    }
}

task testWithJacocoReport {
    group = rootProject.name
    dependsOn tasks.checkAndTest, jacocoTestReport
    jacocoTestReport.mustRunAfter checkAndTest
}

sourceSets.main.java.srcDirs = []
sourceSets.main.groovy.srcDirs += ["src/main/java"]

build.dependsOn shadowJar
